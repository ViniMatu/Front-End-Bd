{
  "version": 3,
  "sources": ["src/styles.scss", "node_modules/@angular/material/core/tokens/_m3-system.scss", "src/styles/variables.scss"],
  "sourcesContent": ["\n// Include theming for Angular Material with `mat.theme()`.\n// This Sass mixin will define CSS variables that are used for styling Angular Material\n// components according to the Material 3 design spec.\n// Learn more about theming and how to use it for your application's\n// custom components at https://material.angular.dev/guide/theming\n@use '@angular/material' as mat;\n@use \"../src/styles/variables.scss\";\n\nhtml {\n  @include mat.theme((\n    color: (\n      primary: mat.$magenta-palette,\n      tertiary: mat.$violet-palette,\n    ),\n    typography: Roboto,\n    density: 0,\n  ));\n\n  // Default the application to a light color theme. This can be changed to\n  // `dark` to enable the dark color theme, or to `light dark` to defer to the\n  // user's system settings.\n  color-scheme: light;\n\n  // Set a default background, font and text colors for the application using\n  // Angular Material's system-level CSS variables. Learn more about these\n  // variables at https://material.angular.dev/guide/system-variables\n  background-color: var(--mat-sys-surface);\n  color: var(--mat-sys-on-surface);\n  font: var(--mat-sys-body-medium);\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  height: 100%;\n  background-color: variables.$color-500;\n  \n  .modal-aberto {\n    overflow: hidden;\n  }\n}\n\n.tabbed {\n  margin-left: 2em;\n}\n\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5); // fundo escuro semi-transparente\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 999;\n}", "@use '../../button-toggle/m3-button-toggle';\n@use '../../button/m3-button';\n@use '../../button/m3-fab';\n@use '../../button/m3-icon-button';\n@use '../../checkbox/m3-checkbox';\n@use '../../chips/m3-chip';\n@use '../../expansion/m3-expansion';\n@use '../../form-field/m3-form-field';\n@use '../../list/m3-list';\n@use '../../paginator/m3-paginator';\n@use '../../radio/m3-radio';\n@use '../../select/m3-select';\n@use '../../stepper/m3-stepper';\n@use '../../table/m3-table';\n@use '../../tabs/m3-tabs';\n@use '../../toolbar/m3-toolbar';\n@use '../../tree/m3-tree';\n@use '../style/elevation';\n@use '../theming/config-validation';\n@use '../theming/definition';\n@use '../theming/palettes';\n@use '../style/sass-utils';\n@use './m3';\n@use 'sass:map';\n@use 'sass:meta';\n\n/// Emits necessary CSS variables for Material's system level values for the values defined in the\n/// config map. The config map can have values color, typography, and/or density.\n///\n/// If the config map's color value is an Angular Material color palette, it will be used as the\n/// primary and tertiary colors with a `color-scheme` theme type. Otherwise if the color value is a\n/// map, it must have a `primary` value containing an Angular Material color palette, and\n/// optionally a different `tertiary` palette (defaults to primary palette) and `theme-type` that\n/// is either `light`, `dark`, or 'color-scheme` (defaults to `color-scheme`). Color variable\n/// definitions will not be emitted if there are no color values in the config.\n///\n/// If the config map's typography value is a font family string, it will be used as the\n/// plain and brand font family with default bold, medium, and regular weights of 700, 500, and 400,\n/// respectfully. Otherwise if the typography value is a map, it must have a `plain-family` font\n/// family value, and optionally a different `brand-family` font family (defaults to the plain\n/// value) and weights for `bold-weight` (default: 700), `bold-weight` (default: 500), and\n/// `bold-weight` (default: 400). Typography variable definitions will not be emitted if there are\n/// no typography values in the config.\n///\n/// If the config map's density value is a number, it will be used as the density scale. Otherwise\n/// if the density value is a map, it must have a `scale` value. Density variable definitions will\n/// not be emitted if there are no density values in the config.\n///\n/// The application variables emitted use the namespace prefix \"--mat-sys\".\n/// e.g. --mat-sys-surface: #E5E5E5\n///\n/// @param {Map} $config The color configuration with optional keys color, typography, or density.\n@mixin theme($config, $overrides: ()) {\n  $color: map.get($config, color);\n  $color-config: null;\n  @if ($color) {\n    // validate-palette returns null if it is a valid M3 palette\n    $is-palette: config-validation.validate-palette($color) == null;\n\n    // Default to \"color-scheme\" theme type if the config's color does not provide one.\n    @if (not $is-palette and not map.has-key($color, theme-type)) {\n      $color: map.set($color, theme-type, color-scheme);\n    }\n\n    $color-config: $color;\n    @if ($is-palette) {\n      $color: map.set($color, tertiary, $color);\n      $color-config: (\n        definition.$internals: (\n          palettes: (\n            primary: map.remove($color, neutral, neutral-variant, secondary),\n            secondary: map.get($color, secondary),\n            tertiary: map.remove($color, neutral, neutral-variant, secondary, error),\n            neutral: map.get($color, neutral),\n            neutral-variant: map.get($color, neutral-variant),\n            error: map.get($color, error),\n          ),\n          theme-type: color-scheme,\n        )\n      );\n    } @else {\n      $primary: map.get($color, primary) or palettes.$violet-palette;\n      $tertiary: map.get($color, tertiary) or $primary;\n      $color-config: (\n        definition.$internals: (\n          palettes: (\n            primary: map.remove($primary, neutral, neutral-variant, secondary),\n            secondary: map.get($primary, secondary),\n            tertiary: map.remove($tertiary, neutral, neutral-variant, secondary, error),\n            neutral: map.get($primary, neutral),\n            neutral-variant: map.get($primary, neutral-variant),\n            error: map.get($primary, error),\n          ),\n          theme-type: map.get($color, theme-type),\n        )\n      );\n    }\n\n    @include system-level-colors($color-config, $overrides, definition.$system-fallback-prefix);\n    @include system-level-elevation($color-config, $overrides, definition.$system-fallback-prefix);\n  }\n\n  $typography: map.get($config, typography);\n  $typography-config: null;\n  @if ($typography) {\n    $plain: (Roboto, sans-serif);\n    $brand: $plain;\n    $bold: 700;\n    $medium: 500;\n    $regular: 400;\n    @if (meta.type-of($typography) == map) {\n      $plain: map.get($typography, plain-family);\n      $brand: map.get($typography, brand-family) or $plain;\n      $bold: map.get($typography, bold-weight) or $bold;\n      $medium: map.get($typography, medium-weight) or $medium;\n      $regular: map.get($typography, regular-weight) or $regular;\n    } @else {\n      $plain: $typography;\n      $brand: $typography;\n    }\n    $typography-config: (\n      definition.$internals: (\n        font-definition: (\n          plain: $plain,\n          brand: $brand,\n          bold: $bold,\n          medium: $medium,\n          regular: $regular,\n        )\n      )\n    );\n    @include system-level-typography(\n        $typography-config, $overrides, definition.$system-fallback-prefix);\n  }\n\n  $density: map.get($config, density);\n  $density-config: null;\n  @if ($density) {\n    $scale: 0;\n    @if (meta.type-of($density) == map) {\n      $scale: map.get($density, scale);\n    } @else {\n      $scale: $density;\n    }\n    @if ($scale != 0) {\n      // Emit component-level density tokens if the scale is lower than 0. The density tokens\n      // do not fallback to any system-level values and must be defined if the scale is different.\n      $density-tokens: get-density-tokens($scale);\n      @each $tokens in $density-tokens {\n        @each $token-name, $token-value in $tokens {\n          --mat-#{$token-name}: #{$token-value};\n        }\n      }\n    }\n  }\n\n  @include system-level-shape($overrides: $overrides, $prefix: definition.$system-fallback-prefix);\n  @include system-level-state($overrides: $overrides, $prefix: definition.$system-fallback-prefix);\n}\n\n// Gets all density-related tokens from the components.\n@function get-density-tokens($scale) {\n  @return (\n    m3-checkbox.get-density-tokens($scale),\n    m3-chip.get-density-tokens($scale),\n    m3-expansion.get-density-tokens($scale),\n    m3-fab.get-density-tokens($scale),\n    m3-button.get-density-tokens($scale),\n    m3-form-field.get-density-tokens($scale),\n    m3-icon-button.get-density-tokens($scale),\n    m3-list.get-density-tokens($scale),\n    m3-paginator.get-density-tokens($scale),\n    m3-radio.get-density-tokens($scale),\n    m3-tabs.get-density-tokens($scale),\n    m3-select.get-density-tokens($scale),\n    m3-button-toggle.get-density-tokens($scale),\n    m3-stepper.get-density-tokens($scale),\n    m3-table.get-density-tokens($scale),\n    m3-toolbar.get-density-tokens($scale),\n    m3-tree.get-density-tokens($scale),\n  );\n}\n\n/// Emits the system-level CSS variables for each of the provided override values. E.g. to\n/// change the primary color to red, use `mat.theme-overrides((primary: red));`\n@mixin theme-overrides($overrides, $prefix: definition.$system-fallback-prefix) {\n  $sys-names: map-merge-all(\n      m3.md-sys-color-values-light(palettes.$blue-palette),\n      m3.md-sys-typescale-values((\n        brand: (Roboto),\n        plain: (Roboto),\n        bold: 700,\n        medium: 500,\n        regular: 400\n      )),\n      m3.md-sys-elevation-values(),\n      m3.md-sys-shape-values(),\n      m3.md-sys-state-values());\n\n  @include sass-utils.current-selector-or-root {\n    @each $name, $value in $overrides {\n      @if (map.has-key($sys-names, $name)) {\n        --#{$prefix}-#{$name}: #{map.get($overrides, $name)};\n      }\n    }\n  }\n}\n\n@mixin system-level-colors($theme, $overrides: (), $prefix: null) {\n  $palettes: map.get($theme, definition.$internals, palettes);\n  $type: map.get($theme, definition.$internals, theme-type);\n\n  @if (not $prefix) {\n    $prefix: map.get($theme, definition.$internals,\n        color-system-variables-prefix) or definition.$system-level-prefix;\n  }\n\n\n  $sys-colors: _generate-sys-colors($palettes, $type);\n\n  // Manually insert a subset of palette values that are used directly by components\n  // instead of system variables.\n  $sys-colors: map.set($sys-colors, neutral-variant20, map.get($palettes, neutral-variant, 20));\n  $sys-colors: map.set($sys-colors, neutral10, map.get($palettes, neutral, 10));\n\n  @include sass-utils.current-selector-or-root {\n    @each $name, $value in $sys-colors {\n      --#{$prefix}-#{$name}: #{map.get($overrides, $name) or $value};\n    }\n  }\n}\n\n@function _generate-sys-colors($palettes, $type) {\n  $light-sys-colors: m3.md-sys-color-values-light($palettes);\n  @if ($type == light) {\n    @return $light-sys-colors;\n  }\n\n  $dark-sys-colors: m3.md-sys-color-values-dark($palettes);\n  @if ($type == dark) {\n    @return $dark-sys-colors;\n  }\n\n  @if ($type == color-scheme) {\n    $light-dark-sys-colors: ();\n    @each $name, $light-value in $light-sys-colors {\n      $dark-value: map.get($dark-sys-colors, $name);\n      $light-dark-sys-colors:\n          map.set($light-dark-sys-colors, $name, light-dark($light-value, $dark-value));\n    }\n    @return $light-dark-sys-colors;\n  }\n\n  @error 'Unknown theme-type provided: #{$type}';\n}\n\n@mixin system-level-typography($theme, $overrides: (), $prefix: null) {\n  $font-definition: map.get($theme, definition.$internals, font-definition);\n\n  @if (not $prefix) {\n    $prefix: map.get($theme, definition.$internals,\n        typography-system-variables-prefix) or definition.$system-level-prefix;\n  }\n\n  @include sass-utils.current-selector-or-root {\n    @each $name, $value in m3.md-sys-typescale-values($font-definition) {\n      --#{$prefix}-#{$name}: #{map.get($overrides, $name) or $value};\n    }\n  }\n}\n\n@mixin system-level-elevation($theme, $overrides: (), $prefix: definition.$system-level-prefix) {\n  $shadow-color: map.get(\n      $theme, definition.$internals, palettes, neutral, 0);\n\n\n  @include sass-utils.current-selector-or-root {\n    @each $name, $value in m3.md-sys-elevation-values() {\n      $level: map.get($overrides, $name) or $value;\n      $value: elevation.get-box-shadow($level, $shadow-color);\n      --#{$prefix}-#{$name}: #{$value};\n    }\n  }\n}\n\n@mixin system-level-shape($theme: (), $overrides: (), $prefix: definition.$system-level-prefix) {\n  @include sass-utils.current-selector-or-root {\n    @each $name, $value in m3.md-sys-shape-values() {\n      --#{$prefix}-#{$name}: #{map.get($overrides, $name) or $value};\n    }\n  }\n}\n\n@mixin system-level-state($theme: (), $overrides: (), $prefix: definition.$system-level-prefix) {\n  @include sass-utils.current-selector-or-root {\n    @each $name, $value in m3.md-sys-state-values() {\n      --#{$prefix}-#{$name}: #{map.get($overrides, $name) or $value};\n    }\n  }\n}\n\n/// Creates a single merged map from the provided variable-length map arguments\n@function map-merge-all($maps...) {\n  $result: ();\n  @each $map in $maps {\n    $result: map.merge($result, $map);\n  }\n  @return $result;\n}\n", "$color-50: #EFF0F9;\r\n$color-100: #ACB5E4;\r\n$color-200: #6276C8;\r\n$color-300: #233070;\r\n$color-400: #0D153F;\r\n$color-500: #030519;\r\n"],
  "mappings": "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",
  "names": []
}
